# Save metrics to an IoTDB Database
[[outputs.iotdb]]
  ## Configuration of IoTDB server
  ## host is the IP address of the IoTDB server
  ## port is a string descirbing the port of the IoTDB service, default port is 6667
  host = "127.0.0.1"
  port = "6667"

  ## Configuration of authentication
  ## The defualt user is 'root', and the defualt password is also 'root'
  user = "root"
  password = "root"

  ## Configuration of session
  ## - timeout is in milliseconds(ms). This is the timeout for calling 'Session.Open'
  ##   The value type of 'timeout' should be int. 0 means no timeout. 
  ##   Negative values will be treated as 0.
  timeout = 5000

  ## Configuration of type conversion for 64-bits unsigned int
  ## IoTDB DO NOT support unsigned int (version 13.x). 
  ## For uint32, this plugin will convert it into int64.
  ## But if the specific type of an unsigned int is uint64, overflow may take place. 
  ## So user should choose an available option of converting uint64 below.
  ## 
  ## This plugin supports 3 different available conversions of UInt64: 
  ## - "ForceToInt64": no mater what the value it is, force covert it into int64.
  ## - "ToInt64"(default): if an unsigned int is less than MAXINT64, covert it into int64; 
  ##                       else save MAXINT64 instaed. math.MaxInt64 = 9223372036854775807
  ## - "Text": no matter what value it is, convert it into a string, which is called TEXT in IoTDB.
  convertUint64To = "ToInt64"

  ## Configuration of TimeStamp
  ## TimeStamp is always saved in 64bits int. timeStampUnit specifies the unit of timestamp. 
  ## Available value:
  ## "second", "millisecond", "microsecond", "nanosecond"(defualt)
  timeStampUnit = "nanosecond"

  ## Configuration of dealing with Tags
  ## Tag is not fully supported by IoTDB, but an instead method is provided here:
  ##     https://iotdb.apache.org/zh/UserGuide/Master/API/InfluxDB-Protocol.html
  ## 
  ## This pugin provide two available methods to deal with Tags:
  ## - "Measurements": Treat Tags as measurements. For each Key:Value in Tag, convert them 
  ##                            into Measurement, Value, DataType, which are supported in IoTDB.
  ## - "DeviceID_subtree"(default): Treat Tags as part of device id. Tags is subtree of 'Name'.
  ##
  ## For Example, a metric:
  ##      Name="root.sg.device", Tags={tag1="private", tag2="working"}, Fields={s1=100, s2="hello"}
  ## - Records in "Measurements" method:
  ##      root.sg.device, s1=100, s2="hello", tag1="private", tag2="working"
  ## - Records in "DeviceID_subtree" method:
  ##      root.sg.device.private.working, s1=100, s2="hello"
  treateTagsAs = "DeviceID_subtree"

